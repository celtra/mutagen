syntax = "proto3";

package session;

option go_package = "github.com/havoc-io/mutagen/pkg/service/session";

import "session/configuration.proto";
import "session/selection.proto";
import "session/state.proto";
import "url/url.proto";

message CreationSpecification {
    url.URL alpha = 1;
    url.URL beta = 2;
    // Configuration is the base session configuration. It is the result of
    // merging the global configuration (unless disabled), any manually
    // specified configuration file, and any command line configuration
    // parameters.
    session.Configuration configuration = 3;
    // ConfigurationAlpha is the alpha-specific session configuration. It is
    // determined based on command line configuration parameters.
    session.Configuration configurationAlpha = 4;
    // ConfigurationBeta is the beta-specific session configuration. It is
    // determined based on command line configuration parameters.
    session.Configuration configurationBeta = 5;
    map<string, string> labels = 6;
}

message CreateRequest {
    CreationSpecification specification = 1;
    string response = 2;
}

message CreateResponse {
    string session = 1;
    string message = 2;
    string prompt = 3;
}

message ListRequest {
    session.Selection selection = 1;
    uint64 previousStateIndex = 2;
}

message ListResponse {
    uint64 stateIndex = 1;
    repeated session.State sessionStates = 2;
}

message FlushRequest {
    session.Selection selection = 1;
    bool skipWait = 2;
}

message FlushResponse{
    string message = 1;
}

message PauseRequest {
    session.Selection selection = 1;
}

message PauseResponse{
    string message = 1;
}

message ResumeRequest {
    session.Selection selection = 1;
    string response = 2;
}

message ResumeResponse {
    string message = 1;
    string prompt = 2;
}

message TerminateRequest {
    session.Selection selection = 1;
}

message TerminateResponse{
    string message = 1;
}

service Sessions {
    rpc Create(stream CreateRequest) returns (stream CreateResponse) {}
    rpc List(ListRequest) returns (ListResponse) {}
    rpc Flush(stream FlushRequest) returns (stream FlushResponse) {}
    rpc Pause(stream PauseRequest) returns (stream PauseResponse) {}
    rpc Resume(stream ResumeRequest) returns (stream ResumeResponse) {}
    rpc Terminate(stream TerminateRequest) returns (stream TerminateResponse) {}
}
